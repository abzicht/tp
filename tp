#!/usr/bin/bash

# TELEPORT
# Author: Abzicht - abzicht@gmail.com - github.com/abzicht
# This tool teleports to any defined portal
# Config methodology was found here: https://unix.stackexchange.com/questions/175648/use-config-file-for-my-shell-script#331965 - Author: gw0
# Installation:
# Source tp under ~/.bashrc or ~/.zshrc like so:
# source $PWD/tp
#
# Whether this application was run successfully or not is determined by the arrow output:
# Arrow  : Meaning
# ------ : ---------------------------------------------------------------------------------
# --> $1 : The application successfully teleported to $1
# -/> $1 : The portal $1 was neither specified in ~/.tp_config nor in ~/.tp_config.defaults
# -x> $1 : The underlying command (cd) returned a non-zero exit code


# Setup required files
declare -g portal_file_="$HOME/.tp_config"
default_="$HOME/.tp_config.defaults"

[ -e "$portal_file_" ] || touch "$portal_file_";
[ -e "$default_" ] || (touch "$default_"; echo "r=/
root=/root
home=HOME/
docs=HOME/Documents
downloads=HOME/Downloads
dsk=HOME/Desktop
pics=HOME/Pictures" > $default_)


beginswith(){ case $2 in "$1"*) true;; *) false;; esac; }

declare -A portals=()

read_portals(){
file_=${1}
for line in $(cat $file_); do
		! beginswith \# "$line" &&
		(echo $line | cut -d "=" -f 2 &>/dev/null) &&
		key=$(echo $line | cut -d "=" -f 1) &&
		value=$(echo $line | cut -d "=" -f 2) &&
		portals[${key}]="${value}";
done
}

read_portals $default_
read_portals $portal_file_

# ${!portals[@]} expands the keys
# ${portals[@]} expands the values

tp(){

args=$(getopt -l "add:,list,test:,help" -o "lht:a:" -- "$@")

eval set -- "$args"

# Display help for this tool
show_help(){
  echo -e "
This is Teleport - a tool for teleporting to any desired location.
To teleport, choose a previously setup portal.

SYNOPSIS
  tp [OPTIONS] [PORTAL]

OPTIONS
  -h, --help              prints this help
  -a, --add PORTAL PATH   adds the new portal PORTAL that points to PATH to the list
                          of configured portals ($HOME/.tp_config)
  -l, --list              lists all available portals (default and custom,
                          specified in $HOME/.tp_config and $HOME/.tp_config.defaults)
  -t, --test TEST         displays, if a portal called TEST is specified and if
                          it is functional
PORTAL
  Specify one of the available portals to change the directory to the corresponding location.
  Available portals are displayed with tp -l
  Before teleporting, it is also possible to check the existence of a portal with tp -t PORTAL.
  Portals are specified in $HOME/.tp_config and $HOME/.tp_config.defaults.
  Portals of $HOME/.tp_config overwrite the values of $HOME/.tp_config.defaults.

ARROW OUTPUT
  When teleporting, a colored arrow indicates if going through the portal was successful or not:
  \e[32m-->\e[0m : The teleport was successful
  \e[33m-/>\e[0m : An error occurred while trying to teleport
  \e[31m--x\e[0m : The portal is not specified

  A new portal is only added to the list of portals, if there is no existing portal of that name.
  Whether the portal was successfully added or not is indicated by the following output:
  \e[32m-->\e[0m : The portal was successfully added
  \e[33m-/>\e[0m : The portal was not added because its path is broken
  \e[31m--!\e[0m : The portal is already configured

SETUP
  Let \$path be the path the tp script is stored at.
  Add the following line to $HOME/.bashrc or $HOME/.zshrc:
    source \$path/tp

AUTHOR
  Abzicht <abzicht@gmail.com>
  Abzicht's GitHub: https://github.com/abzicht
YEAR
  2020
"
}

list_portals(){
  let max_portal_length=0
  if [ ! -z $(echo $SHELL | grep bash ) ]; then
    for key in ${!portals[@]}; do
      if [ $max_portal_length -lt ${#key} ]; then
        max_portal_length="${#key}"
      fi
    done
    for key in ${!portals[@]}; do
        let num_of_whitespace=$((max_portal_length-${#key}))
        whitespace=$(printf '%*s' "$num_of_whitespace")
        path_="${portals[$key]}"
        (portal_exists $key && \
        ((portal_works $key && echo -e "${key}${whitespace} \e[32m-->\e[0m ${path_}") || \
        echo -e "${key}${whitespace} \e[33m-/->\e[0m ${path_}")) || \
        echo -e "${key}${whitespace} \e[31m--x\e[0m"
    done
  else
    for key in ${(k)portals[@]}; do
      if [ $max_portal_length -lt ${#key} ]; then
        max_portal_length="${#key}"
      fi
    done
    for key in ${(k)portals[@]}; do
        let num_of_whitespace=$((max_portal_length-${#key}))
        whitespace=$(printf '%*s' "$num_of_whitespace")
        path_="${portals[$key]}"
        (portal_exists $key && \
        ((portal_works $key && echo -e "${key}${whitespace} \e[32m-->\e[0m ${path_}") || \
  	  echo -e "${key}${whitespace} \e[33m-/->\e[0m ${path_}")) || \
        echo -e "${key}${whitespace} \e[31m--x\e[0m"
    done
  fi
}

portal_exists(){
#credit: https://stackoverflow.com/questions/13219634/easiest-way-to\
#-check-for-an-index-or-a-key-in-an-array
  if [ ${portals[$1]+exists} ]; then
		  return 0
  else
		  return 1
  fi
}

portal_works(){
  $(cd ${portals[$1]} &> /dev/null)
}

# Test if the portal exists and if it works
test_portal(){
  portal=${1}
  (portal_exists $portal &&
  ((portal_works $portal && echo -e "${portal} \e[32m-->\e[0m ${portals[$portal]} ") ||
  echo -e "${portal} \e[33m-/->\e[0m ${portals[$portal]} ")) ||
  echo -e "${portal} \e[31m--x\e[0m"
}

# Adds a portal to $portal_file_ unless another portal with the same name already exists
add_portal(){
  read_portals $portal_file_
  portal=${1}
  (portal_exists $portal &&
  (echo -e "${portal} \e[31m--!\e[0m ${2}";
   test_portal ${portal})) ||
  (portal_path=$((cd ${2} &>/dev/null && pwd) || echo "");
  ([ -z "$portal_path" ] && echo -e "${portal} \e[33m-/->\e[0m ${2}") ||
  (echo "${portal}=${portal_path}" >> $portal_file_;
  read_portals $portal_file_
  echo -e "${portal} \e[32m-->\e[0m ${portal_path}"))
}

# Parsing all arguments
while [ $# -ge 1 ]; do
        case "$1" in
                --)
                    # No more options left.
                    shift
                    break
                   ;;
                -l|--list)
      list_portals
                        ;;
                -h|--help)
      show_help
                        ;;
    -t|--test)
      test_portal $2
      shift
      ;;
    -a|--add)
      portal_name=$2
      shift
      shift
      portal_path=$2
      add_portal $portal_name $portal_path
      shift
      ;;
        esac

        shift
done

# The "core" function
if [ ${#*} != 0 ]; then
  portal=$*
  dir=${portals[$portal]}
  if portal_exists $portal; then
    if portal_works $portal; then
      echo -e "${portal} \e[32m-->\e[0m ${dir}"
      cd $dir &> /dev/null
    else
      echo -e "${portal} \e[33m-/->\e[0m ${dir}"
    fi
  else
    echo -e "${portal} \e[31m--x\e[0m"
  fi
fi
}
